@page "/service/{categoryName}"
@using Barbershop.Components.UI
@using Barbershop.Model.ViewModel
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@inject NavigationManager navigation
@rendermode InteractiveServer
<Layout Overflow="Overflow.Auto" Display="Display.None.OnMobile.Flex">
    <LayoutContent Flex="Flex.Row.Wrap.AlignContent.Stretch" 
        Overflow="Overflow.Hidden">
        <Card 
            Background="Background.Light" 
            Width="Width.Is100.OnMobile.Is50.OnDesktop" 
            Padding="Padding.Is0.OnX.Is2.OnY.OnMobile.Is5.OnDesktop"
            >
            <BlockImage Height="Height.Is50" Width="Width.Is75" Margin="Margin.IsAuto.OnX" ImageHref="@viewService?.ImageHref" 
            Style="border:5px solid black;border-radius: 10px;background-repeat:no-repeat; background-position: center; background-size: cover"></BlockImage>
            <CardBody Padding="Padding.Is0.OnMobile">
                <CardText TextAlignment="TextAlignment.Center"
                          Margin="Margin.Is2.FromTop.OnDesktop.IsAuto.OnX"
                    TextSize="TextSize.Heading4"
                    TextWeight="TextWeight.Bold">
                    @viewService?.Name - @viewService?.PriceRubles рублей
                </CardText>
                <CardBody Overflow="Overflow.Auto" Height="Height.Is75"
                    Padding="Padding.Is0.OnMobile" Display="Display.None.OnMobile.Block.OnDesktop">
                    <CardTitle TextSize="TextSize.Heading5" TextWeight="TextWeight.SemiBold">Описание</CardTitle>
                    <CardText 
                        TextAlignment="TextAlignment.Start" Margin="Margin.Is2.FromTop.IsAuto.OnX">
                        @viewService?.Description
                    </CardText>
                </CardBody>
            </CardBody>
            <CardBody Padding="Padding.Is0.OnMobile">
                <Button Color="Color.Primary" Width="Width.Is100" 
                        Clicked="@handleServiceApply">Записаться</Button>
                <Button Color="Color.Light" Width="Width.Is100" Type="ButtonType.Link" To="/about">Как это работает?</Button>
            </CardBody>
        </Card>
        <Card Background="Background.Light"
              Width="Width.Is100.OnMobile.Is50.OnDesktop"
              Padding="Padding.Is0.OnX.Is2.OnY.OnMobile.Is5.OnDesktop">
            <CardTitle TextSize="TextSize.Heading3">Варианты</CardTitle>
            <Div Flex="Flex.Row.Wrap.JustifyContent.Start" >
                <Repeater Items="categoryServices">
                    <Button Width="Width.Auto" Margin="Margin.Is1" Style="@getColorString(context)"
                        Clicked="() => {toggleActiveViewService(context);}">
                        @context.Name
                    </Button>
                </Repeater>
            </Div>
            <CardTitle TextSize="TextSize.Heading3">Отзывы</CardTitle>
        </Card> 
    </LayoutContent>
</Layout>
<Modal @ref="@applyServiceModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Запись на услугу</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field @bind-Visibility="@DateFieldVisibility">
                <FieldLabel>Дата посещения</FieldLabel>
                <Select TValue="string" SelectedValue="@SelectedDateString" SelectedValueChanged="@selectedDateServiceChanged">
                    <SelectItem>Не выбрано</SelectItem>
                    <Repeater Items="@AvailableServiceDates" >
                        <SelectItem Value="@context">@context</SelectItem>
                    </Repeater>
                </Select>
            </Field>
            <Field @bind-Visibility="@MasterFieldVisibility" >
                <FieldLabel>Мастер</FieldLabel>
                <Select TValue="int" SelectedValue="@SelectedMasterId" SelectedValueChanged="@selectedMasterChanged">
                    <SelectItem>Не выбрано</SelectItem>
                    <Repeater Items="@AvailableMasters">
                        <SelectItem Value="@context.Id">@(context?.User.Name + " " + context?.User.Surname)</SelectItem>
                    </Repeater>
                </Select>
            </Field>
            <Field @bind-Visibility="@TimeFieldVisibility" >
                <FieldLabel>Время (час)</FieldLabel>
                <Select TValue="int" SelectedValue="@SelectedHour" SelectedValueChanged="@selectedHourChanged">
                    <SelectItem>Не выбрано</SelectItem>
                    <Repeater Items="@availableHours">
                        <SelectItem Value="@context">@(context + ":00")</SelectItem>
                    </Repeater>
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Clicked="@handleConfirmService" Color="Color.Primary" @bind-Visibility="@ConfirmServiceButtonVisibility">Записаться</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public string categoryName { get; set; }
    private Barbershop.Service? viewService;
    public List<Barbershop.Service> categoryServices = [];

    Modal applyServiceModal;
    List<string> AvailableServiceDates = [];
    List<Master> AvailableMasters = [];
    string SelectedDateString = "";
    int SelectedMasterId;
    List<int> availableHours = [];
    int SelectedHour;
    Visibility DateFieldVisibility = Visibility.Invisible,
    MasterFieldVisibility = Visibility.Invisible,
    TimeFieldVisibility = Visibility.Invisible,
    ConfirmServiceButtonVisibility = Visibility.Invisible;
    protected override async Task OnParametersSetAsync()
    {
        using (var db = new DatabaseContext())
        {
            categoryServices = db.Services.Where(service => service.Category == categoryName).ToList();
            if (categoryServices.Count() < 1)
            {
                navigation.NavigateTo("/NotFound");
                return;
            }
            viewService = categoryServices[0];
        }
    }

    void handleServiceApply()
    {
        if (viewService == null)
        {
            return;
        }
        applyServiceModal.Show();
        using (var db = new DatabaseContext())
        {
            AvailableServiceDates = db.Shifts.Where(shift => shift.Timestamp > DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc) &&
                shift.Master.MasterServices.Any(masterService => masterService.Service.Name == viewService.Name)).GroupBy(shift => shift.Timestamp)
            .Select(group => group.Key.ToShortDateString()).ToList();
        }
        DateFieldVisibility = Visibility.Visible;
        StateHasChanged();

    }

    Task selectedDateServiceChanged(string value)
    {
        SelectedDateString = value;

        using (var db = new DatabaseContext())
        {
            AvailableMasters = db.Shifts.Where(shift => shift.Timestamp > DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc) &&
                shift.Master.MasterServices.Any(masterService => masterService.Service.Name == viewService.Name))
        .Where(shift => shift.Timestamp == DateTime.SpecifyKind(DateTime.Parse(SelectedDateString), DateTimeKind.Utc))
        .Include(shift => shift.Master).Include(shift => shift.Master.User).Select(shift => shift.Master).ToList();
        }
        MasterFieldVisibility = Visibility.Visible;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task selectedMasterChanged(int masterId)
    {
        Console.WriteLine("Started!");
        SelectedMasterId = masterId;
        List<int> allHours = [9, 10, 11, 12, 13, 14, 15, 16,17,18];
        using (var db = new DatabaseContext())
        {
            var busyHours = db.RenderedServices.Where(rService => rService.Timestamp == DateTime.SpecifyKind(DateTime.Parse(SelectedDateString), DateTimeKind.Utc)
            && rService.Master.Id == SelectedMasterId).ToList().Select(rService => rService.Timestamp.Hour).ToList();
            availableHours = allHours.Except(busyHours).ToList();
        }

        TimeFieldVisibility = Visibility.Visible;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task selectedHourChanged(int value)
    {
        SelectedHour = value;
        ConfirmServiceButtonVisibility = Visibility.Visible;
        StateHasChanged();
        return Task.CompletedTask;
    }
    async Task handleConfirmService()
    {
        Console.WriteLine(JsonConvert.SerializeObject(new { SelectedDateString, SelectedMasterId, SelectedHour }));
    }
    string getColorString(Barbershop.Service service)
    {
        int totalCount = categoryServices.Count();
        int index = categoryServices.IndexOf(service);
        string color = $"background-color: hwb({256 * index / totalCount} 60% 5%);";
        return color;
    }
    void toggleActiveViewService(Barbershop.Service service)
    {
        Console.WriteLine(service.Name);
        viewService = service;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
           
        }
    }
}
